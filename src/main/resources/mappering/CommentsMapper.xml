<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="run.app.mapper.CommentsMapper">
    <resultMap id="BaseResultMap" type="run.app.entity.model.Comments">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="author_id" jdbcType="BIGINT" property="authorId"/>
        <result column="object_id" jdbcType="BIGINT" property="objectId"/>
        <result column="root" jdbcType="BIGINT" property="root"/>
        <result column="pid" jdbcType="BIGINT" property="pid"/>
        <result column="content" jdbcType="VARCHAR" property="content"/>
        <result column="type" jdbcType="TINYINT" property="type"/>
        <result column="from_id" jdbcType="BIGINT" property="fromId"/>
        <result column="to_id" jdbcType="BIGINT" property="toId"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
        <result column="ip_address" jdbcType="VARCHAR" property="ipAddress"/>
        <result column="is_del" jdbcType="TINYINT" property="isDel"/>
        <result column="is_author" jdbcType="TINYINT" property="isAuthor"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, author_id, object_id, root, pid, content, type, from_id, to_id, create_time,
        update_time, ip_address, is_del, is_author
    </sql>
    <select id="selectByExample" parameterType="run.app.entity.model.CommentsExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from comments
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from comments
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from comments
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="run.app.entity.model.CommentsExample">
        delete from comments
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="run.app.entity.model.Comments">
        insert into comments (id, author_id, object_id,
        root, pid, content, type,
        from_id, to_id, create_time,
        update_time, ip_address, is_del,
        is_author)
        values (#{id,jdbcType=BIGINT}, #{authorId,jdbcType=BIGINT}, #{objectId,jdbcType=BIGINT},
        #{root,jdbcType=BIGINT}, #{pid,jdbcType=BIGINT}, #{content,jdbcType=VARCHAR}, #{type,jdbcType=TINYINT},
        #{fromId,jdbcType=BIGINT}, #{toId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP},
        #{updateTime,jdbcType=TIMESTAMP}, #{ipAddress,jdbcType=VARCHAR}, #{isDel,jdbcType=TINYINT},
        #{isAuthor,jdbcType=TINYINT})
    </insert>
    <insert id="insertSelective" parameterType="run.app.entity.model.Comments">
        insert into comments
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="authorId != null">
                author_id,
            </if>
            <if test="objectId != null">
                object_id,
            </if>
            <if test="root != null">
                root,
            </if>
            <if test="pid != null">
                pid,
            </if>
            <if test="content != null">
                content,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="fromId != null">
                from_id,
            </if>
            <if test="toId != null">
                to_id,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="ipAddress != null">
                ip_address,
            </if>
            <if test="isDel != null">
                is_del,
            </if>
            <if test="isAuthor != null">
                is_author,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="authorId != null">
                #{authorId,jdbcType=BIGINT},
            </if>
            <if test="objectId != null">
                #{objectId,jdbcType=BIGINT},
            </if>
            <if test="root != null">
                #{root,jdbcType=BIGINT},
            </if>
            <if test="pid != null">
                #{pid,jdbcType=BIGINT},
            </if>
            <if test="content != null">
                #{content,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=TINYINT},
            </if>
            <if test="fromId != null">
                #{fromId,jdbcType=BIGINT},
            </if>
            <if test="toId != null">
                #{toId,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="ipAddress != null">
                #{ipAddress,jdbcType=VARCHAR},
            </if>
            <if test="isDel != null">
                #{isDel,jdbcType=TINYINT},
            </if>
            <if test="isAuthor != null">
                #{isAuthor,jdbcType=TINYINT},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="run.app.entity.model.CommentsExample" resultType="java.lang.Long">
        select count(*) from comments
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update comments
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.authorId != null">
                author_id = #{record.authorId,jdbcType=BIGINT},
            </if>
            <if test="record.objectId != null">
                object_id = #{record.objectId,jdbcType=BIGINT},
            </if>
            <if test="record.root != null">
                root = #{record.root,jdbcType=BIGINT},
            </if>
            <if test="record.pid != null">
                pid = #{record.pid,jdbcType=BIGINT},
            </if>
            <if test="record.content != null">
                content = #{record.content,jdbcType=VARCHAR},
            </if>
            <if test="record.type != null">
                type = #{record.type,jdbcType=TINYINT},
            </if>
            <if test="record.fromId != null">
                from_id = #{record.fromId,jdbcType=BIGINT},
            </if>
            <if test="record.toId != null">
                to_id = #{record.toId,jdbcType=BIGINT},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.ipAddress != null">
                ip_address = #{record.ipAddress,jdbcType=VARCHAR},
            </if>
            <if test="record.isDel != null">
                is_del = #{record.isDel,jdbcType=TINYINT},
            </if>
            <if test="record.isAuthor != null">
                is_author = #{record.isAuthor,jdbcType=TINYINT},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update comments
        set id = #{record.id,jdbcType=BIGINT},
        author_id = #{record.authorId,jdbcType=BIGINT},
        object_id = #{record.objectId,jdbcType=BIGINT},
        root = #{record.root,jdbcType=BIGINT},
        pid = #{record.pid,jdbcType=BIGINT},
        content = #{record.content,jdbcType=VARCHAR},
        type = #{record.type,jdbcType=TINYINT},
        from_id = #{record.fromId,jdbcType=BIGINT},
        to_id = #{record.toId,jdbcType=BIGINT},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
        ip_address = #{record.ipAddress,jdbcType=VARCHAR},
        is_del = #{record.isDel,jdbcType=TINYINT},
        is_author = #{record.isAuthor,jdbcType=TINYINT}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="run.app.entity.model.Comments">
        update comments
        <set>
            <if test="authorId != null">
                author_id = #{authorId,jdbcType=BIGINT},
            </if>
            <if test="objectId != null">
                object_id = #{objectId,jdbcType=BIGINT},
            </if>
            <if test="root != null">
                root = #{root,jdbcType=BIGINT},
            </if>
            <if test="pid != null">
                pid = #{pid,jdbcType=BIGINT},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=TINYINT},
            </if>
            <if test="fromId != null">
                from_id = #{fromId,jdbcType=BIGINT},
            </if>
            <if test="toId != null">
                to_id = #{toId,jdbcType=BIGINT},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="ipAddress != null">
                ip_address = #{ipAddress,jdbcType=VARCHAR},
            </if>
            <if test="isDel != null">
                is_del = #{isDel,jdbcType=TINYINT},
            </if>
            <if test="isAuthor != null">
                is_author = #{isAuthor,jdbcType=TINYINT},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="run.app.entity.model.Comments">
        update comments
        set author_id = #{authorId,jdbcType=BIGINT},
        object_id = #{objectId,jdbcType=BIGINT},
        root = #{root,jdbcType=BIGINT},
        pid = #{pid,jdbcType=BIGINT},
        content = #{content,jdbcType=VARCHAR},
        type = #{type,jdbcType=TINYINT},
        from_id = #{fromId,jdbcType=BIGINT},
        to_id = #{toId,jdbcType=BIGINT},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        update_time = #{updateTime,jdbcType=TIMESTAMP},
        ip_address = #{ipAddress,jdbcType=VARCHAR},
        is_del = #{isDel,jdbcType=TINYINT},
        is_author = #{isAuthor,jdbcType=TINYINT}
        where id = #{id,jdbcType=BIGINT}
    </update>
</mapper>